---
title: S√©ance 1 - Introduction
---

## Pr√©sentation de la mati√®re et des objectifs

La mati√®re s'oriente et s'organise autour du d√©veloppement, de la conception et du d√©ploiement d'applications WEB s√©curis√©es. Elle s'impr√®gne enti√®rement du parcours DACS (D√©ploiement d'Applications Communicantes et S√©curis√©es).
√Ä travers ce cours, nous apprendrons PHP, c√©l√®bre langage du WEB, ainsi qu'un de ses frameworks "Laravel". Vous serrez √©galement sensibilis√©s √† la s√©curit√© WEB ainsi qu'au d√©ploiement autonomme d'application.

Plusieurs types de titres indiquant le type de contenu :
- üìú Cours th√©orique
- ‚öôÔ∏è Cours pratique
- üìö TD/TP
- üìù Contr√¥le/QCM

:::info

Des commentaires avec les instructions seront pr√©sents tout au long des TD/TP pour vous guider sur les r√©ponses √† fournir.

Par exemple :

```php
<?php

$ma_var = "toto";

// Ici, il faut afficher $ma_var
...
```
:::

:::info
Quand le commentaire suivant est pr√©sent dans un fichier, **vous devez fournir un lien vers l'endroit o√π vous avez trouv√© la r√©ponse**.

```php
/**
 * Lien : https://mon_lien.com
 **/
```

G√©n√©ralement, vous pouvez trouver la r√©ponse sur 3 sites diff√©rents :
- Ce site, en cliquant sur le titre de la partie, vous pourrez r√©cup√©rer son lien. Par exemple : https://phd.julien-cpsn.com/courses/PHP/seance_1#remplacer-une-partie-dun-string-avec-replace
- Sur la documentation officielle de PHP. Par exemple : https://www.php.net/manual/en/function.str-replace.php
- Un blog, un forum, ou n'importe quel autre site en ligne (donc pas ChatGPT :)

:::danger
**Tout commentaire non rempli sera consid√©r√© non rendu**.
- Si le travail √† rendre est **non-not√©**, je viendrai vous poser la question.
- Si le travail √† rendre est **not√©**, la r√©ponse sera compt√©e comme fausse.
:::

:::tip
**Vous recevrez la liste des √©l√©ments √† r√©viser un peu de temps avant l'√©xamen.** Si j'oublie, n'h√©sitez pas √† me le rappeler.
:::

## üìú Introduction √† PHP

PHP, acronyme de "PHP: Hypertext Preprocessor", est un langage de script principalement con√ßu pour le d√©veloppement web. PHP a vu le jour en 1995 avec sa premi√®re version cr√©√©e par Rasmus Lerdorf, et depuis, il a consid√©rablement √©volu√© pour devenir l'un des langages de script les plus utilis√©s pour le d√©veloppement web. √âcrit en C, PHP tire parti de la performance et de la flexibilit√© offertes par ce langage de bas niveau, tout en fournissant une syntaxe plus simple et accessible aux d√©veloppeurs web. La version actuelle, 8.3.9, int√®gre de nombreuses am√©liorations et nouvelles fonctionnalit√©s par rapport √† ses pr√©d√©cesseurs, telles que des optimisations de performance, des am√©liorations de s√©curit√©, et des fonctionnalit√©s de programmation modernes. Gr√¢ce √† ces mises √† jour r√©guli√®res, PHP continue de s'adapter aux besoins √©volutifs du d√©veloppement web moderne et reste un choix pertinent pour le d√©veloppement c√¥t√© serveur.

<details>
    <summary>**Scripting**</summary>

    Contrairement aux langages de programmation traditionnels qui n√©cessitent la cr√©ation de programmes complets, un langage de script comme PHP est utilis√© pour √©crire de petits scripts ou fichiers qui ex√©cutent des actions sp√©cifiques sur un serveur web.
</details>

<details>
    <summary>**Interpr√©t√©**</summary>

    PHP est **interpr√©t√©**, c'est-√†-dire que le code est **ex√©cut√© ligne par ligne par un interpr√©teur**, contrairement aux langages compil√©s (comme C, C++ ou Java) o√π le code source est transform√© en code machine/binaire avant d'√™tre ex√©cut√©.
</details>

<details>
    <summary>**Multi-plateforme**</summary>

    PHP est **multi-plateforme**, ce qui signifie qu'**il peut fonctionner sur diff√©rents syst√®mes d'exploitation**, tout comme Java.
</details>

<details>
    <summary>**Programmation Orient√©e Object**</summary>

    Il prend √©galement en charge la **Programmation Orient√©e Objet (POO)**, permettant la cr√©ation de classes, d'objets, et l'utilisation de concepts comme l'h√©ritage et le polymorphisme. 
</details>

<details>
    <summary>**Faiblement typ√©**</summary>

    PHP est faiblement typ√© (ou typ√© de mani√®re souple), ce qui signifie que les types de donn√©es des variables ne sont pas strictement d√©finis et peuvent √™tre chang√©s dynamiquement (ex: un int peut devenir un string), facilitant ainsi l'√©criture du code mais pouvant parfois conduire √† des erreurs subtiles.
</details>

<details>
    <summary>**Execution c√¥t√© serveur**</summary>

    √Ä noter que PHP s'ex√©cute uniquement c√¥t√© serveur : **le code est interpr√©t√© sur le serveur**, puis le **r√©sultat est renvoy√© au client** (navigateur web), ce qui en fait un langage id√©al pour la cr√©ation de pages web dynamiques.

![Diagramme Client-Serveur](../images/client_serveur.svg)
</details>

### Coder en PHP

:::tip
Toujours garder la [documentation de PHP](https://www.php.net/manual/fr/) pr√®s de soi
:::

- Extension ".php"
- Les variables ont toutes un `$`, ex: `$ma_var`
- Point virgule √† la fin des lignes
- Convention de nommage snake_case, ex `ma_super_fonction` 
- Tous les fichiers commencent avec `<?php`, et peuvent finir par `?>`
- Il est possible de mettre des balises `<?php ... ?>` dans du HTML (toujours dans un fichier `.php`)

```php
<div>
    <p>Mon paragraphe</p>
    <div><?php echo $ma_var; ?></div>
</div>
```

### Diff√©rences de PHP

#### Echo

Print avec `echo` (ne pas oublier d'ajouter un `\n`, car il ne retourne pas √† la ligne)

```php
$ma_var = "toto";
echo $ma_var;
echo "Salut c'est $ma_var\n";
```

![echo.png](../images/echo.png)

#### Debug

Debugguer une variable avec `var_dump()`. Cela permet d'afficher le contenu complet de la variable au moment o√π est appel√©e la fonction pour r√©gler d'√©ventuels probl√®mes.

```php
$ma_var = [1, 2, 5];
var_dump($ma_var);
```

![var_dump.png](../images/var_dump.png)

#### For each

Le `for each` ("pour chaque")

```php
$mes_valeurs = [1, 2, 3, 4];

foreach ($mes_valeurs as $var) {
    echo "$var\n";
}
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
1
2
3
4
```
</details>

Il est aussi possible d'utiliser une cl√©

```php
$mes_valeurs = [10, 11, 12, 13];

foreach ($mes_valeurs as $index => $var) {
    echo "$index: $var\n";
}
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
0: 10
1: 11
2: 12
3: 13
```
</details>

#### Match

Plus r√©cent, le `match`

```php
$ma_var = 2;

$mon_autre_var = match ($ma_var) {
    1, 2 => "toto",
    $ma_var > 10 => "tata",
    default => "cas par d√©faut"
};

echo $mon_autre_var;
```
<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
toto
```
</details>

#### Tableaux associatifs

Pour cr√©er des tableaux avec des index personnalis√©s (comme un dictionnaire)

```php
$ma_var = [
    0 => "toto",
    "mon index 1" => "tata",
    "mon autre index" => "tonton" 
];

echo $ma_var["mon autre index"];
```
<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
tonton
```
</details>

#### Op√©rateur "." pour ajouter des strings

Pour ajouter/concatener des strings en PHP, on utilise l'op√©rateur `.`

```php
echo "mon string 1" . "mon string 2";
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
mon string 1mon string 2
```
</details>

- - -

## üìö TD 1 : Premiers scripts


### Cloner le projet
Cloner le projet https://github.com/PHP-BUT2-DACS/TP-TD

```shell
git clone https://github.com/PHP-BUT2-DACS/TP-TD.git
```

:::warning
**Ce projet vous servira tout le long du module**. Gardez le pr√©cieusement !
:::

### Faire les exercices

1. Dans un terminal, ex√©cutez la commande `php -v` (ou `php --version`) pour √™tre inform√© de la version de votre interpr√©teur PHP.

2. Ensuite, naviguez jusqu'au dossier du projet `/S√©ance 1/TD1`. Puis d√©marrez le serveur PHP avec la commande suivante :

```shell
php -S localhost:8080
```

<details>
    <summary>Comprendre la commande</summary>

- `php` fait r√©f√©rence √† l'interpr√©teur PHP pr√©-install√© sur votre machine.
- L'option `-S` (pour **S**erver) permet de **cr√©er un serveur PHP**. Cette option n√©cessite deux param√®tres :
  - `<addr>`, c'est-√†-dire **l'adresse √† laquelle on veut utiliser notre serveur** (`localhost`, correspond √† l'h√¥te local)
  - `<port>` permet de pr√©ciser **le port √† utiliser** pour l'adresse pr√©c√©demment fournie. En informatique, il est couramment admis que les ports 808X, 800X, 300X, 500X sont r√©serv√©s pour le d√©veloppement. 
</details>

3. Ouvrir le navigateur √† l'URL [http://localhost:8080/exo1.php](http://localhost:8080/exo1.php)

4. Une fois la commande lanc√©e et l'URL ouverte, votre terminal devrait afficher quelque-chose de similaire :

:::info üñ•Ô∏è Sortie
![terminal.png](../images/terminal.png)
:::

5. R√©pondez aux exercices du TD1. Vous pouvez demander de l'aide si n√©cessaire.

:::tip
La commande `php -h` (ou `php --help`) pourra vous aider si vous √™tes perdus avec d'autres commandes de PHP.
:::

- - -

## ‚öôÔ∏è Fonctions utilitaires & autres outils

### Utilitaires pour les string (cha√Ænes de caract√®res)

[Documentation](https://www.php.net/manual/fr/ref.strings.php)

#### String en majuscule ou miniscule

```php
$ma_var = "toto";
echo strtoupper($ma_var) . "\n";

$ma_var = "TATA";
echo strtolower($ma_var);
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
TOTO
tata
```
</details>

#### S√©parer avec explode et regrouper avec implode

```php
$ma_var = "toto;tata;tonton";

// S√©parer un string vers un tableau
$mon_tableau = explode(";", $ma_var);
var_dump($mon_tableau);

// Regrouper des √©l√©ments d'un tableau vers un string
$mon_autre_var = implode(";", $mon_tableau);
echo $mon_autre_var;
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
["toto", "tata", "tonton"]
toto;tata;tonton
```
</details>

#### Supprimer les espaces en trop avec trim

```php
$ma_var = "   toto    ";
$mon_autre_var = trim($ma_var);
echo $ma_var;
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
toto
```
</details>

Il existe aussi ltrim (left trim) pour supprimer les espaces seulement au d√©but, et rtrim (right trim) pour supprimer les espaces seulement √† la fin.

#### Remplacer une partie d'un string avec replace

```php
$ma_var = "toto";
$mon_autre_var = str_replace("o", "a", $ma_var);
echo $ma_var;
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
tata
```
</details>

### Utilitaires pour les int et float (nombres)

#### Transformer une variable en int ou float

```php
$ma_var = "10";
$mon_int = intval($ma_var);
var_dump($ma_var);
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
int(10)
```
</details>

M√™me principe avec `floatval()`

### Autres utilitaires

#### Checker le type d'une variable

- `is_array()` ‚Äî D√©termine si une variable est un tableau
- `is_bool()` ‚Äî D√©termine si une variable est un bool√©en
- `is_callable()` ‚Äî D√©termine si une valeur peut √™tre appel√© comme une fonction dans la port√©e courante.
- `is_countable()` ‚Äî V√©rifie si le contenu de la variable est une valeur d√©nombrable
- `is_float()` ‚Äî D√©termine si une variable est de type nombre d√©cimal
- `is_int()` ‚Äî D√©termine si une variable est de type nombre entier
- `is_numeric()` ‚Äî D√©termine si une variable est un nombre ou une cha√Æne num√©rique

```php
var_dump(is_int(23));
var_dump(is_int("23"));
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
bool(true)
bool(false)
```
</details>

#### Checker si une variable existe (et si elle est vide)

`isset()` d√©termine si une variable est consid√©r√©e d√©finie, ceci signifie qu'elle est d√©clar√©e et est diff√©rente de `null`.

```php
$est_ce_que_ma_var_existe = isset($ma_var)
var_dump($est_ce_que_ma_var_existe)
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
bool(false)
```
</details>

`empty()` d√©termine si une variable est consid√©r√©e d√©finie et si sa valeur √©quivaut √† `false`.

```php
$mon_tableau = ["toto", "tata", false]

$est_ce_que_toto_existe = empty($mon_tableau[0])
$est_ce_que_tonton_existe = empty($mon_tableau[2])
var_dump($est_ce_que_toto_existe)
var_dump($est_ce_que_tonton_existe)
```

<details>
    <summary>üñ•Ô∏è Sortie</summary>
```
bool(false)
bool(true)
```
</details>

- - -
## üìö TD 2 : Utilitaires & outils

Si ce n'est pas d√©j√† fait, cloner le projet https://github.com/PHP-BUT2-DACS/TP-TD

```shell
git clone https://github.com/PHP-BUT2-DACS/TP-TD.git
```

1. Lancer le serveur PHP dans le dossier `/S√©ance 1/TD2`

```shell
php -S localhost:8080
```

2. R√©pondez aux exercices du TD2. Vous pouvez demander de l'aide si n√©cessaire.
